<template>
	<view class="trtc-container">
		<web-view ref="webView" style="width: 400px; height: 200px; position: fixed;top: 0px;"
			src="http://192.168.2.188:8080/" :webview-styles="webviewStyles" @onPostMessage="handleMessage"></web-view>
		<view class="trtc-video-view" :style="`height: ${height}px;`">
			<trtc-local-view :viewId="userId"></trtc-local-view>
		</view>
	</view>
</template>

<script>
	import permision from "@/TrtcCloud/permission.js";
	import TrtcCloud from '@/TrtcCloud/lib/index';
	import {
		TRTCAppScene,
		TRTCVideoStreamType,
		TRTCAudioRoute,
		TRTCAudioQuality
	} from '@/TrtcCloud/lib/TrtcDefines';
	import genTestUserSig from '@/debug/GenerateTestUserSig';
	import TrtcLocalView from '@/TrtcCloud/view/TrtcLocalView';
	import TrtcRemoteView from '@/TrtcCloud/view/TrtcRemoteView';
	const roomId = Math.floor(Math.random() * 100000).toString();
	const userId = 'user_' + Math.floor(Math.random() * 100000).toString();

	export default {
		components: {
			TrtcLocalView: TrtcLocalView,
			TrtcRemoteView: TrtcRemoteView,
		},
		data() {
			return {
				webviewStyles: {
					progress: {
						color: '#FF3333'
					}
				},
				trtcCloud: null,
				userId: "uye",
				height: 0
			}
		},
		methods: {
			getUuid() {
				return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
					var r = (Math.random() * 16) | 0,
						v = c == 'x' ? r : (r & 0x3) | 0x8;
					return v.toString(16);
				});
			},
			// todo: 这里的判断大概率是错的
			isPrimitive(obj) {
				if (!obj /* null 或 undefined */|| Number.isNaN(obj)/* NaN*/) {
					return true;
				}
				const proto = Object.getPrototypeOf(obj);
				return proto === Object.prototype ||
					proto === Array.prototype ||
					proto === String.prototype ||
					proto === Number.prototype ||
					proto === Boolean.prototype;
			},
			handleMessage(evt) {
				let msg = evt.detail.data[0];
				const funcName = msg.func;
				const objName = msg.objName;
				const params1 = msg.params1;
				const params2 = msg.params2;
				const retFuncName = msg.retFunc;
				const paramsCallbackType = msg.paramsCallbackType;
				const ret = this.remoteCall(objName, funcName, paramsCallbackType, params1, params2);
				let retJson = ret;
				if (this.isPrimitive(retJson)) {
					if (retJson === undefined) {
						retJson = null;
					}
				} else {
					retJson = this.getUuid();
					this[retJson] = ret;
				}

				const curWebview = this.$refs.webView;
				curWebview.evalJS(`window['${retFuncName}'](\`${JSON.stringify(retJson)}\`)`);
			},
			remoteCall(objName, func, paramsCallbackType, params1, params2) {
				let ret = null;

				let paramCode1 = JSON.stringify(params1);
				const curWebview = this.$refs.webView;
				if (paramsCallbackType[0]) {
					// 参数1是函数，则需要创建函数代码
					paramCode1 = function(param1, param2) {
						if (param1 === undefined) {
							param1 = null;
						}
						if (param2 === undefined) {
							param2 = null;
						}
						curWebview.evalJS(
							`window['${params1}'](\`${JSON.stringify(param1)}\`,\`${JSON.stringify(param2)}\`)`);
					}
				}
				let paramCode2 = JSON.stringify(params2);
				if (paramsCallbackType[1]) {
					// 参数2是函数，则需要创建函数代码
					paramCode2 = function(param1, param2) {
						if (param1 === undefined) {
							param1 = null;
						}
						if (param2 === undefined) {
							param2 = null;
						}
						curWebview.evalJS(
							`window['${params2}'](\`${JSON.stringify(param1)}\`,\`${JSON.stringify(param2)}\`)`);
					}
				}
				let code = `
				ret = this['${objName}'].${func}(${paramsCallbackType[0]? "paramCode1": paramCode1}, ${paramsCallbackType[1]? "paramCode2": paramCode2})
				`;
				eval(code);
				return ret;
			}
		},
		mounted() {
			uni.getSystemInfo({
				success: function(res) {
					this.height = res.windowHeight;
					this.width = res.windowWidth;
				}.bind(this)
			});  
  
			// 生成 userSig
			const {
				sdkAppId,
				userSig
			} = genTestUserSig(this.userId);
			this.sdkAppId = sdkAppId;
			this.userSig = userSig;
			if (!sdkAppId || !userSig) {
				uni.showToast({
					title: '请填写 sdkAppId、userSig',
					icon: 'none'
				});
			}
			const _this = this;
			const curWebview = this.$refs.webView;
			setTimeout(() => {
				curWebview.evalJS(`window['getTRTCConfig'](${JSON.stringify({
					sdkAppId: _this.sdkAppId,
					userSig: _this.userSig,
				})})`);
			}, 500);
			this.TrtcCloud = TrtcCloud;
			this.uni = uni;
			this.plus = plus;
			this.permision = permision;
		}
	}
</script>

<style>

</style>