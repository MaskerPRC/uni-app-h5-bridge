<template>
	<view class="trtc-container">
		<web-view ref="webView" style="width: 400px; height: 200px; position: fixed;top: 0px;"
			src="http://192.168.2.188:8080/" :webview-styles="webviewStyles" @onPostMessage="handleMessage"></web-view>
		<view class="trtc-video-view" :style="`height: ${height}px;`">
			<trtc-local-view :viewId="userId"></trtc-local-view>
		</view>
	</view>
</template>

<script>
	import permision from "@/TrtcCloud/permission.js";
	import TrtcCloud from '@/TrtcCloud/lib/index';
	import {
		TRTCAppScene,
		TRTCVideoStreamType, 
		TRTCAudioRoute,
		TRTCAudioQuality
	} from '@/TrtcCloud/lib/TrtcDefines';
	import genTestUserSig from '@/debug/GenerateTestUserSig';
	import TrtcLocalView from '@/TrtcCloud/view/TrtcLocalView';
	import TrtcRemoteView from '@/TrtcCloud/view/TrtcRemoteView';
	const roomId = Math.floor(Math.random() * 100000).toString();
	const userId = 'user_' + Math.floor(Math.random() * 100000).toString();
 
	export default {
		components: {
			TrtcLocalView: TrtcLocalView,
			TrtcRemoteView: TrtcRemoteView,
		},
		data() {
			return {
				webviewStyles: {
					progress: {
						color: '#FF3333'
					}
				},
				trtcCloud: null,
				userId: "uye",
				height: 0,
				primitivePropertyNameMap: new Map()
			}
		},
		created() {
			const primitiveType = [[],{},1,"",true];
			for(let index in primitiveType) {
				let type = primitiveType[index];
				let _this = this;
				Object.getOwnPropertyNames(Object.getPrototypeOf(type)).forEach(name=>_this.primitivePropertyNameMap[name] = true);
			} 
		},
		methods: {
			getUuid() {
				return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
					var r = (Math.random() * 16) | 0;
						v = c == 'x' ? r : (r & 0x3) | 0x8;
					return v.toString(16);
				}); 
			},
			isPrimitive(obj) {
				if(obj === undefined || obj === null) {
					return true;
				}
				let allNames = Object.getOwnPropertyNames(Object.getPrototypeOf(obj));
				for (var i = 0; i < allNames.length; i++) {
					if(!this.primitivePropertyNameMap[allNames[i]]) {
						return false;
					}
				}
				return true; 
			},
			handleMessage(evt) {
				let msg = evt.detail.data[0];
				const type = msg.type;
				const commandName = msg.command;
				const objName = msg.objName;
				const params = msg.params;
				const retFuncName = msg.retFunc;
				
				let ret = null;
				if(type === "VALUE") {
					// 获取值
					ret = this.remoteValue(objName, commandName);
				}
				else if(type === "CALL") {
					// 函数调用
					ret = this.remoteCall(objName, commandName, params);
				} 
				else {
					return;
				}  
				let retJson = ret;
				if (this.isPrimitive(retJson)) {
					if (retJson === undefined) {
						retJson = null; 
					}
				} else {
					retJson = this.getUuid();
					this[retJson] = ret;
				}
				const curWebview = this.$refs.webView;
				curWebview.evalJS(`window.hasOwnProperty('${retFuncName}') && window.onMessageFromUni('${retFuncName}', \`${JSON.stringify(retJson)}\`)`);
				
			},
			setValueByPath(treeParams, path, value) {
				if(path.length === 1) {
					treeParams[path[0]] = value;
				}
				else {
					this.setValueByPath(treeParams[path[0]], path.slice(1), value);
				}
			},
			remoteCall(objName, func, params) {
				let ret = null;

				const curWebview = this.$refs.webView;
				
				// 使用平面的参数数组，生成tree状的
				let treeParams = {};
				for(const typeKey in params) {
					const param = params[typeKey];
					const paramPath = param[0];
					const paramType = param[1];
					const paramValue = param[2];
					if (paramType === "callback") {
						// 参数是函数，则需要创建函数代码
						const paramCodeN = function(_param1, _param2) {
							if (_param1 === undefined) {
								_param1 = null;
							}
							if (_param2 === undefined) {
								_param2 = null;
							}
							curWebview.evalJS(
								`window.hasOwnProperty('${paramValue}') && window.onMessageFromUni('${paramValue}', \`${JSON.stringify(_param1)}\`,\`${JSON.stringify(_param2)}\`)`);
						}
						// 将函数插入到treeParam中
						this.setValueByPath(treeParams, paramPath, paramCodeN);
					} 
					else {
						// 将数据插入到treeParam中
						this.setValueByPath(treeParams, paramPath, paramValue);
					}
				}
				
				let paramCode = "";
				for(const key in treeParams) {
					if(key !== "0") {
						paramCode += `, `;
					}
					paramCode += `treeParams[${key}]`;
				}
				
				let code = `
				ret = this['${objName}'].${func}(${paramCode});
				`; 
				eval(code);
				return ret;
			},
			remoteValue(objName, valueName) {
				let ret = null;
				const curWebview = this.$refs.webView;
				let code = `
				ret = this['${objName}'].${valueName};
				`;
				eval(code);
				return ret;
			}
		},
		mounted() {
			uni.getSystemInfo({
				success: function(res) {
					this.height = res.windowHeight;
					this.width = res.windowWidth;
				}.bind(this)
			});  
  
			// 生成 userSig
			const {
				sdkAppId,
				userSig
			} = genTestUserSig(this.userId);
			this.sdkAppId = sdkAppId;
			this.userSig = userSig;
			if (!sdkAppId || !userSig) {
				uni.showToast({
					title: '请填写 sdkAppId、userSig',
					icon: 'none'
				});
			}
			const curWebview = this.$refs.webView;
			this.TrtcCloud = TrtcCloud;
			this.uni = uni;
			this.plus = plus;
			this.permision = permision;
			this.nvue = this;
		}
	} 
</script>
 
<style>

</style>